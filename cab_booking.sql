create database cab_booking;
use cab_booking;

CREATE TABLE Customers (
    CustomerID VARCHAR(10) PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    Gender CHAR(1),
    JoinDate DATE
);

CREATE TABLE Drivers (
    DriverID VARCHAR(10) PRIMARY KEY,
    Name VARCHAR(50),
    Phone VARCHAR(15),
    LicenseNo VARCHAR(20),
    Rating DECIMAL(2,1),
    JoinDate DATE
);
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE Cabs (
    CabID VARCHAR(10) PRIMARY KEY,
    DriverID VARCHAR(10),
    CabModel VARCHAR(50),
    CabNumber VARCHAR(15),
    Capacity INT,
    Type VARCHAR(20),
    FOREIGN KEY (DriverID) REFERENCES Drivers(DriverID)
);

CREATE TABLE Bookings (
    BookingID VARCHAR(10) PRIMARY KEY,
    CustomerID VARCHAR(10),
    CabID VARCHAR(10),
    DriverID VARCHAR(10),
    BookingDate DATE,
    PickupLocation VARCHAR(50),
    DropLocation VARCHAR(50),
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (CabID) REFERENCES Cabs(CabID),
    FOREIGN KEY (DriverID) REFERENCES Drivers(DriverID)
);

CREATE TABLE TripDetails (
    TripID VARCHAR(10) PRIMARY KEY,
    BookingID VARCHAR(10),
    DistanceKm DECIMAL(5,1),
    DurationMins INT,
    Fare DECIMAL(8,2),
    PaymentMode VARCHAR(20),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID)
);


CREATE TABLE Feedback (
    FeedbackID VARCHAR(10) PRIMARY KEY,
    BookingID VARCHAR(10),
    CustomerID VARCHAR(10),
    DriverID VARCHAR(10),
    Rating INT,
    Comments VARCHAR(100),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (DriverID) REFERENCES Drivers(DriverID)
);
SET FOREIGN_KEY_CHECKS = 1;

select * from Customers;
select * from bookings;
select * from cabs;
select * from Drivers;
select * from tripdetails;
select * from feedback;

SET SQL_SAFE_UPDATES = 0;

UPDATE Feedback
SET Comments = NULL
WHERE Comments = '' OR Comments IS NULL;

SET SQL_SAFE_UPDATES = 0;

-- Customer and Booking Analysis
-- 1. Identify customers who have completed the most bookings. What insights can you
-- draw about their behavior?

SELECT 
	c. customerID,
	c. Name, 
    count(b.BookingID) AS CompleteBooking
FROM customers c 
JOIN bookings b ON b.CustomerID = c.CustomerID
WHERE b.Status = 'Completed'
group by c.customerID, c.Name;
-- order by CompleteBooking DESC
-- LIMIT 5;
    
    

-- 2. Find customers who have canceled more than 30% of their total bookings. What
-- could be the reason for frequent cancellations?

SELECT 
    c.CustomerID,
    c.Name,
    COUNT(*) AS TotalBookings,
    SUM(CASE WHEN b.Status = 'Cancelled' THEN 1 ELSE 0 END) AS CancelledBookings,
    ROUND(SUM(CASE WHEN b.Status = 'Cancelled' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancelRate
FROM Customers c
INNER JOIN Bookings b ON c.CustomerID = b.CustomerID
GROUP BY c.CustomerID, c.Name
HAVING CancelRate > 30;

-- 3. Determine the busiest day of the week for bookings. How can the company optimize
-- cab availability on peak days?
SELECT 
    DAYNAME(b.BookingDate) AS DayOfWeek,
    COUNT(*) AS TotalBookings
FROM Bookings b
GROUP BY DayOfWeek
ORDER BY TotalBookings DESC
LIMIT 1;

-- Driver Performance & Efficiency

-- 1. Identify drivers who have received an average rating below 3.0 in the past three
-- months. What strategies can be implemented to improve their performance?

SELECT 
    d.DriverID,
    d.Name,
    ROUND(AVG(f.Rating), 2) AS AvgRating
FROM Drivers d
JOIN Feedback f ON d.DriverID = f.DriverID
JOIN Bookings b ON f.BookingID = b.BookingID
GROUP BY d.DriverID, d.Name
HAVING AvgRating < 3.0
ORDER BY AvgRating ASC;


-- 2. Find the top 5 drivers who have completed the longest trips in terms of distance.
-- What does this say about their working patterns?

select
	b.DriverID,
    t.distanceKm
from bookings b 
join tripdetails t on b.bookingID = t.bookingID
group by b.DriverID, t.distanceKm
order by t.distanceKm desc
limit 5;

-- 3. Identify drivers with a high percentage of canceled trips. Could this indicate driver
-- unreliability?
SELECT 
    d.DriverID,
    d.Name,
    COUNT(*) AS TotalTrips,
    SUM(b.Status = 'Cancelled') AS CancelledTrips,
    (SUM(b.Status = 'Cancelled') / COUNT(*)) * 100 AS CancelRate
FROM Drivers d
JOIN Bookings b ON d.DriverID = b.DriverID
GROUP BY d.DriverID, d.Name
HAVING CancelRate > 30;


-- Revenue & Business Metrics

-- 1. Calculate the total revenue generated by completed bookings in the last 6 months.
-- How has the revenue trend changed over time?

SELECT 
    SUM(t.Fare) AS TotalRevenue
FROM Bookings b
JOIN TripDetails t ON b.BookingID = t.BookingID
WHERE b.Status = 'Completed'
  AND b.BookingDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);




-- 2. Identify the top 3 most frequently traveled routes based on PickupLocation and
-- DropoffLocation. Should the company allocate more cabs to these routes?
SELECT 
    b.PickupLocation,
    b.DropLocation,
    COUNT(*) AS TripCount
FROM Bookings b
WHERE b.Status = 'Completed'
GROUP BY b.PickupLocation, b.DropLocation
ORDER BY TripCount DESC
LIMIT 3;



-- 3. Determine if higher-rated drivers tend to complete more trips and earn higher fares.
-- Is there a direct correlation between driver ratings and earnings?

SELECT 
    b.DriverID,
    AVG(f.Rating) AS AvgRating,
    COUNT(*) AS TotalTrips,
    SUM(t.Fare) AS TotalEarnings
FROM Bookings b
INNER JOIN TripDetails t ON b.BookingID = t.BookingID
LEFT JOIN Feedback f ON b.DriverID = f.DriverID
WHERE b.Status = 'Completed'
GROUP BY b.DriverID
ORDER BY AvgRating DESC;

-- Operational Efficiency & Optimization
-- 1. Analyze the average waiting time (difference between booking time and trip start
-- time) for different pickup locations. How can this be optimized to reduce delays?
-- analyze the travel time from pickup and droplocation.

SELECT 
    b.PickupLocation,
    COUNT(*) AS TotalTrips,
    AVG(t.Fare) AS AvgFare,
    AVG(t.DurationMins) AS AvgDurationMins
FROM bookings b
JOIN tripdetails t ON b.BookingID = t.BookingID
WHERE b.Status = 'Completed'
GROUP BY b.PickupLocation
ORDER BY AvgDurationMins DESC;




-- 2. Identify the most common reasons for trip cancellations from customer feedback.
-- What actions can be taken to reduce cancellations?
SELECT 
    f.Comments,
    COUNT(*) AS CancellationCount
FROM bookings b
JOIN Feedback f ON b.BookingID = f.BookingID
WHERE b.Status = 'Cancelled'
GROUP BY f.Comments
ORDER BY CancellationCount DESC;



-- 3. Find out whether shorter trips (low-distance) contribute significantly to revenue.
-- Should the company encourage more short-distance rides?

SELECT
    CASE 
        WHEN t.DistanceKm <= 6 THEN 'Short (≤6 km)'
        WHEN t.DistanceKm <= 15 THEN 'Medium (6–10 km)'
        ELSE 'Long (>12 km)'
    END AS TripCategory,
    COUNT(*) AS TotalTrips,
    SUM(t.Fare) AS TotalRevenue,
    ROUND(SUM(t.Fare) / (SELECT SUM(Fare) FROM tripdetails t2 
                          JOIN bookings b2 ON t2.BookingID = b2.BookingID
                          WHERE b2.Status = 'Completed') * 100, 2) AS RevenuePercent
FROM tripdetails t
JOIN bookings b ON t.BookingID = b.BookingID
WHERE b.Status = 'Completed'
GROUP BY TripCategory
ORDER BY TotalRevenue DESC;



-- Comparative & Predictive Analysis
-- 1. Compare the revenue generated from 'Tata Indica' and 'Maruti Dzire' cabs. Should the company
-- invest more in a particular vehicle type?

SELECT 
    c.CabModel,
    COUNT(*) AS TotalTrips,
    SUM(t.Fare) AS TotalRevenue,
    ROUND(AVG(t.Fare), 2) AS AvgFarePerTrip
FROM bookings b
JOIN tripdetails t ON b.BookingID = t.BookingID
JOIN Cabs c ON b.CabID = c.CabID
WHERE b.Status = 'Completed'
  AND c.CabModel IN ('Tata Indica', 'Maruti Dzire')
GROUP BY c.CabModel
ORDER BY TotalRevenue DESC;


-- 2. Predict which customers are likely to stop using the service based on their last
-- booking date and frequency of rides. How can customer retention be improved?

SELECT 
    CustomerID,
    MAX(BookingDate) AS LastBookingDate,
    COUNT(*) AS TotalTrips,
    DATEDIFF(CURDATE(), MAX(BookingDate)) AS DaysSinceLastBooking
FROM bookings
GROUP BY CustomerID
ORDER BY DaysSinceLastBooking DESC;




-- 3. Analyze whether weekend bookings differ significantly from weekday bookings.
-- Should the company introduce dynamic pricing based on demand?

SELECT
    CASE 
        WHEN DAYOFWEEK(BookingDate) IN (1,7) THEN 'Weekend' 
        ELSE 'Weekday' 
    END AS DayType,
    COUNT(*) AS TotalBookings,
    SUM(t.Fare) AS TotalRevenue,
    ROUND(AVG(t.Fare), 2) AS AvgFare
FROM bookings b
JOIN tripdetails t ON b.BookingID = t.BookingID
WHERE b.Status = 'Completed'
GROUP BY DayType;


SELECT d.driverID, D.name , f.Comments
from Drivers d
join feedback f on d.driverID = f.driverID;

SELECT c.type, c.CabId, b.bookingID, count(*) AS TotalTrips
from Cabs c
join bookings b on c.cabID = b.cabID
where b.status = 'completed'
group by c.Type
order by TotalTrips DESC 
LIMIT 1;

